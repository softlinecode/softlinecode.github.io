<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>softlinecode blog</title>
    <description>Write an awesome description for your new site here. You can edit this line in _config.yml. It will appear in your document head meta (for Google search results) and in your feed.xml site description.
</description>
    <link>http://yourdomain.com/</link>
    <atom:link href="http://yourdomain.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 27 Apr 2015 01:16:42 +0900</pubDate>
    <lastBuildDate>Mon, 27 Apr 2015 01:16:42 +0900</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>First Jekyll Blog Article</title>
        <description>&lt;p&gt;i made blog site with github pages&lt;/p&gt;

</description>
        <pubDate>Fri, 24 Apr 2015 23:17:03 +0900</pubDate>
        <link>http://yourdomain.com/jekyll/update/2015/04/24/github-pages-blog.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2015/04/24/github-pages-blog.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 23 Apr 2015 23:17:03 +0900</pubDate>
        <link>http://yourdomain.com/jekyll/update/2015/04/23/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://yourdomain.com/jekyll/update/2015/04/23/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>[gitflow] gitflow 설명</title>
        <description>&lt;br /&gt;최근에 git 를 사용하면서 git branch 전략을 어떻게 할지 고민을 하다가&lt;br /&gt;sourcetree에서 사용해본 git flow를 한번 사용해보려고 합니다.&lt;br /&gt;&lt;br /&gt;gitflow 설명&lt;br /&gt;https://github.com/nvie/gitflow/wiki/Installation&lt;br /&gt;&lt;br /&gt;mac 에서 설치&lt;br /&gt;&lt;br /&gt;&amp;nbsp;$brew install git-flow&lt;br /&gt;해당 명령어가 가장 심플한데 root 권한 문제로 문제가 발생하였다. sudo 를 사용해도 문제가 발생해서 그냥 편안 방법으로 설치했다. 하단 설치 방법&lt;br /&gt;&lt;br /&gt;&lt;pre style=&quot;background-color: #f7f7f7; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; box-sizing: border-box; color: #333333; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; font-stretch: normal; line-height: inherit; margin: 0px; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;curl -L -O https://raw.github.com/nvie/gitflow/develop/contrib/gitflow-installer.sh&lt;br /&gt;sudo bash gitflow-installer.sh&lt;/code&gt;&lt;/pre&gt;&lt;br /&gt;설치가 완료되면 git flow 명령어로 설치가 되어져 있는지 확인한다.&lt;br /&gt;&lt;br /&gt;$ git flow&lt;br /&gt;usage: git flow &amp;lt;subcommand&amp;gt;&lt;br /&gt;&lt;br /&gt;Available subcommands are:&lt;br /&gt;&amp;nbsp; &amp;nbsp;init &amp;nbsp; &amp;nbsp; &amp;nbsp;Initialize a new git repo with support for the branching model.&lt;br /&gt;&amp;nbsp; &amp;nbsp;feature &amp;nbsp; Manage your feature branches.&lt;br /&gt;&amp;nbsp; &amp;nbsp;release &amp;nbsp; Manage your release branches.&lt;br /&gt;&amp;nbsp; &amp;nbsp;hotfix &amp;nbsp; &amp;nbsp;Manage your hotfix branches.&lt;br /&gt;&amp;nbsp; &amp;nbsp;support &amp;nbsp; Manage your support branches.&lt;br /&gt;&amp;nbsp; &amp;nbsp;version &amp;nbsp; Shows version information.&lt;br /&gt;&lt;br /&gt;Try &#39;git flow &amp;lt;subcommand&amp;gt; help&#39; for details.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;이제 git flow 설치가 다 되었고 이제 개인 프로젝트를 한번 clone해서 받아보겠다.&lt;br /&gt;$ git clone https://github.com/softlinecode/everest.git&lt;br /&gt;$ cd everest&lt;br /&gt;&lt;br /&gt;현재 branch 정보를 확인해봅니다. &amp;nbsp;기본이 master로 되어져 있을겁니다.&lt;br /&gt;$&amp;nbsp;git branch&lt;br /&gt;*master&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;git flow 를 사용하기 위해서는 git flow init 명령어로 초기화를 할 수 있습니다.&lt;br /&gt;각 단계별 branch 에 대해서 사용 여부를 물어 봅니다.&lt;br /&gt;저는 그냥 엔터를 쳐서 사용안함으로 합니다.&lt;br /&gt;기본적으로 master , develop 는 생성되고 develop 로&lt;br /&gt;$ git flow init&lt;br /&gt;&lt;br /&gt;Which branch should be used for bringing forth production releases?&lt;br /&gt;&amp;nbsp; &amp;nbsp;- master&lt;br /&gt;Branch name for production releases: [master]&lt;br /&gt;Branch name for &quot;next release&quot; development: [develop]&lt;br /&gt;&lt;br /&gt;How to name your supporting branch prefixes?&lt;br /&gt;Feature branches? [feature/]&lt;br /&gt;Release branches? [release/]&lt;br /&gt;Hotfix branches? [hotfix/]&lt;br /&gt;Support branches? [support/]&lt;br /&gt;Version tag prefix? []&lt;br /&gt;&lt;br /&gt;이렇게 여러개를 하지 않으려면&lt;br /&gt;&lt;pre style=&quot;background-color: #f7f7f7; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; box-sizing: border-box; color: #333333; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; font-size: 14px; font-stretch: normal; line-height: 1.45; margin-bottom: 16px; overflow: auto; padding: 16px; word-wrap: normal;&quot;&gt;&lt;code style=&quot;background: transparent; border-bottom-left-radius: 3px; border-bottom-right-radius: 3px; border-top-left-radius: 3px; border-top-right-radius: 3px; border: 0px; box-sizing: border-box; display: inline; font-family: Consolas, &#39;Liberation Mono&#39;, Menlo, Courier, monospace; font-stretch: normal; line-height: inherit; margin: 0px; padding: 0px; word-break: normal; word-wrap: normal;&quot;&gt;git flow init [-d]&lt;/code&gt;&lt;/pre&gt;해당 명령어로 하면 기본 값으로 초기화 됩니다.&lt;br /&gt;&lt;br /&gt;해당 명령어로 생성된 branch 를 볼수 있습니다.&lt;br /&gt;$ git branch&lt;br /&gt;* develop&lt;br /&gt;&amp;nbsp; master&lt;br /&gt;&lt;br /&gt;이제 부터 본격적으로 git flow를 사용해서 개발을 하도록 하겠습니다.&lt;br /&gt;우선 git flow에서는 feature 를 생성해서 개발을 시작하도록 합니다.&lt;br /&gt;feature는 개발 및 배포 단위로 보시면 됩니다.&lt;br /&gt;&lt;br /&gt;test 라는 feature 를 생성하도록 하겠습니다.&lt;br /&gt;$ git flow feature start test&lt;br /&gt;Switched to a new branch &#39;feature/test&#39;&lt;br /&gt;&lt;br /&gt;Summary of actions:&lt;br /&gt;- A new branch &#39;feature/test&#39; was created, based on &#39;develop&#39;&lt;br /&gt;- You are now on branch &#39;feature/test&#39;&lt;br /&gt;&lt;br /&gt;Now, start committing on your feature. When done, use:&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;git flow feature finish test&lt;br /&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이렇게 하면 &amp;nbsp;test 라는 새로운 feature 가 생성되었습니다. develop branch 기분으로 feature branch가 생성되었습니다.&lt;/div&gt;&lt;div&gt;&lt;div&gt;$ git branch&lt;/div&gt;&lt;div&gt;&amp;nbsp;develop&lt;/div&gt;&lt;div&gt;* feature/test&lt;/div&gt;&lt;div&gt;&amp;nbsp; master&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;변경할 코드를 변경한후 현재 상태를 확인하도록 하겠습니다.&lt;/div&gt;&lt;div&gt;&lt;div&gt;$ git status&lt;/div&gt;&lt;div&gt;# On branch feature/test&lt;/div&gt;&lt;div&gt;# Changes not staged for commit:&lt;/div&gt;&lt;div&gt;#&lt;span class=&quot;Apple-tab-span&quot; style=&quot;white-space: pre;&quot;&gt; &lt;/span&gt;modified: &amp;nbsp; README.md&lt;/div&gt;&lt;div&gt;#&lt;/div&gt;&lt;div&gt;no changes added to commit&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;특정 한 파일을 수정후 commit 을 한다.&lt;/div&gt;&lt;div&gt;&lt;div&gt;$ git add .&lt;/div&gt;&lt;div&gt;$ git commit -m &quot;test&quot;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;div&gt;feature/test e5775f7] test&lt;/div&gt;&lt;div&gt;&amp;nbsp;1 file changed, 1 insertion(+), 1 deletion(-)&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이제 commit 한 코드가 확인이 다 되었으면 develop branch로 머즈를 하기 위해서&lt;/div&gt;&lt;div&gt;해당 feature 를 끝내도록 합니다. git flow feature finish 명령어를 이용하면 해당&lt;/div&gt;&lt;div&gt;feature branch가 삭제 되고 develop로 머즈가 됩니다.&lt;/div&gt;&lt;div&gt;&lt;div&gt;$ git flow feature finish test&lt;/div&gt;&lt;div&gt;Switched to branch &#39;develop&#39;&lt;/div&gt;&lt;div&gt;Updating 7a5f7f6..e5775f7&lt;/div&gt;&lt;div&gt;Fast-forward&lt;/div&gt;&lt;div&gt;&amp;nbsp;README.md | 2 +-&lt;/div&gt;&lt;div&gt;&amp;nbsp;1 file changed, 1 insertion(+), 1 deletion(-)&lt;/div&gt;&lt;div&gt;Deleted branch feature/test (was e5775f7).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Summary of actions:&lt;/div&gt;&lt;div&gt;- The feature branch &#39;feature/test&#39; was merged into &#39;develop&#39;&lt;/div&gt;&lt;div&gt;- Feature branch &#39;feature/test&#39; has been removed&lt;/div&gt;&lt;div&gt;- You are now on branch &#39;develop&#39;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;현재 branch 를 확인 합니다. ( feature branch가 삭제되고 develop branch로 머즈된후 설정되어져 있습니다.)&lt;/div&gt;&lt;div&gt;&lt;div&gt;&amp;nbsp;$ git branch&lt;/div&gt;&lt;div&gt;* develop&lt;/div&gt;&lt;div&gt;&amp;nbsp; master&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이제 release 작업을 위한 release branch를 생성합니다. &amp;nbsp;git flow release start &quot;branch name&quot; &amp;nbsp;을 하게 되면 develop branch 기준으로 release branch를 생성하게 됩니다.&lt;/div&gt;&lt;div&gt;&lt;div&gt;$ git flow release start release.1.1&lt;/div&gt;&lt;div&gt;Switched to a new branch &#39;release/release.1.1&#39;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Summary of actions:&lt;/div&gt;&lt;div&gt;- A new branch &#39;release/release.1.1&#39; was created, based on &#39;develop&#39;&lt;/div&gt;&lt;div&gt;- You are now on branch &#39;release/release.1.1&#39;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Follow-up actions:&lt;/div&gt;&lt;div&gt;- Bump the version number now!&lt;/div&gt;&lt;div&gt;- Start committing last-minute fixes in preparing your release&lt;/div&gt;&lt;div&gt;- When done, run:&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp;git flow release finish &#39;release.1.1&#39;&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;현재 branch &amp;nbsp;상태를 확인합니다. (release 로 branch가 생성되어져 있습니다.)&lt;/div&gt;&lt;div&gt;&lt;div&gt;$ git branch&lt;/div&gt;&lt;div&gt;&amp;nbsp; develop&lt;/div&gt;&lt;div&gt;&amp;nbsp; master&lt;/div&gt;&lt;div&gt;* release/release.1.1&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;이제 release branch 에서 확인 및 버그패치가 끝났으면 git flow release finish &amp;nbsp;명령어로&amp;nbsp;&lt;/div&gt;&lt;div&gt;master 로 머즈 되고 release.1.1 branch는 삭제 됩니다. 또한 release tag도 생성해주고 develop 에 back-merged 도 자동으로 해줍니다.&lt;/div&gt;&lt;div&gt;&lt;div&gt;$ git flow release finish release.1.1&lt;/div&gt;&lt;div&gt;Branches &#39;master&#39; and &#39;origin/master&#39; have diverged.&lt;/div&gt;&lt;div&gt;And local branch &#39;master&#39; is ahead of &#39;origin/master&#39;.&lt;/div&gt;&lt;div&gt;Deleted branch release/release.1.1 (was e5775f7).&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Summary of actions:&lt;/div&gt;&lt;div&gt;- Latest objects have been fetched from &#39;origin&#39;&lt;/div&gt;&lt;div&gt;- Release branch has been merged into &#39;master&#39;&lt;/div&gt;&lt;div&gt;- The release was tagged &#39;release.1.1&#39;&lt;/div&gt;&lt;div&gt;- Release branch has been back-merged into &#39;develop&#39;&lt;/div&gt;&lt;div&gt;- Release branch &#39;release/release.1.1&#39; has been deleted&lt;/div&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;간단하게 git flow에 대해서 설명을 하였습니다.&lt;/div&gt;&lt;div&gt;git 사용시 &amp;nbsp;branch 전략을 git flow로 하면 좋을것 같고요. 아직은 테스트용으로만 사용하였지만 merge시 conflict 가 날 경우 처리에 대해서만 조금 익숙해지면 팀에서 사용할수 있는&lt;/div&gt;&lt;div&gt;좋은 git branch 전략이라고 생각됩니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;다음에 conflict 발생시 처리도 한번 테스트를 해보면 좋을듯 합니다.&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
        <pubDate>Mon, 22 Sep 2014 23:12:00 +0900</pubDate>
        <link>http://yourdomain.com/2014/09/22/gitflow-gitflow_22.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/09/22/gitflow-gitflow_22.html</guid>
        
        <category>gitflow</category>
        
        <category>git</category>
        
        
      </item>
    
      <item>
        <title>[Android] android studio 설치</title>
        <description>이클립스 기반으로 안드로이드를 개발하였지만 작년에 구글에서 발표하였던 IDE ,&lt;br /&gt;앞으로 계속적으로 발전할 것이라고 생각된다. 아마도 앞으로는 eclipse 기반 ADT를 사용하지 않을 것 같다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;Android Studio download url&lt;br /&gt;http://developer.android.com/sdk/installing/studio.html&lt;br /&gt;&lt;br /&gt;Intellij 단축키&lt;br /&gt;http://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard.pdf&lt;br /&gt;http://www.jetbrains.com/idea/docs/IntelliJIDEA_ReferenceCard_Mac.pdf&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
        <pubDate>Sat, 15 Feb 2014 22:12:00 +0900</pubDate>
        <link>http://yourdomain.com/2014/02/15/android-android-studio.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2014/02/15/android-android-studio.html</guid>
        
        <category>studio</category>
        
        <category>android</category>
        
        
      </item>
    
      <item>
        <title>[애자일이야기] 애자일에 꽃은 회고다.</title>
        <description>-- 애자일 6개월 경험에서 나오는 경험담 --&lt;br /&gt;&lt;br /&gt;&amp;nbsp;애자일에 꽃은 회고이다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;그 이유는 나는 우선 조직(팀)이 앞으로 변화해야 하는 Action Plan 이 만들어지기 때문이다. 두번째는 개개인의 상황과 감정이 모든 팀원들에게 공유 되는것이다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;회고가 무엇이고 어떻게 해야하는 내용은 여기 글에서는 다루지 않을 것이다.&lt;br /&gt;어떠한 방법을 사용하던지 두가지가 된다면 그 조직(팀)은 회고를 잘하고 있다고 생각이 든다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;회고에서는 누구나 자신의 상황과 감정을 솔직하게 이야기 해야 한다. 이러한 상황과 감정이 수직적 조직에서는 의미가 없거나 무언가 자기 변명처럼 들릴수도 있겠지만 애자일에서는 개개인의 그런 점들이 다른 조직(팀)원에게 전달 되어야 한다고 생각한다. 실제로 우리가 어떠한 일들이 잘 되거나 안될때는 이런한 부분이 매우 중요하게 작용하기 때문이다.&lt;br /&gt;&amp;nbsp;하지만 실제로 회고를 하다가 보면 자기의 이야기를 하는것이 아니라 다른 사람들의 이야기를 하거나 또는 다른 사람에 이야기를 막거나 또는 자기가 재 해석을 해서 전달이 정확하게 안 되는 경우가 많다. 그리고 자신의 상황과 감정이 공유되는거지 이해를 구하는 것이 아닌데도 이해를 구하는 분위기로 가는 경우가 있다. 이 경우에는 스크럼마스터가 중재를 해서 분위기나 바꾸거나 회고의 방해가 되는 사람의 경우 바로 이야기를 해줘야 한다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;Action Plan이 있어야 한다. 이것은 실제로 회고에서 어느 누가 무엇을 말했는지를 정리하지 않지만 Action Plan은 정리하려는 이유이다. 회고를 통한 Action Plan은 그 조직(팀)에서 가장 필요한 변화 포인트이고 모두가 변화를 인지한 중요한 내용이다.&lt;br /&gt;&amp;nbsp; 하지만 가장 안 좋은 케이스가 항상 비슷한 Action Plan 이 나오는 경우다. 이런 경우가 반복적으로 나온다면 팀의 회고뿐 아니라 Action Plan에도 문제가 있을 수 있다.&lt;br /&gt;&amp;nbsp;또는 기존에 했던 &amp;nbsp;Action Plan 은 그냥 잊어지는 경우이다. 새로운 Action Plan 만 있을 뿐 우리가 기존에 만들었던 Action Plan을 잘 지키고 있는지 점검하는것 도 중요하다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;실제로 회고를 하지만 여러가지 이유로 팀에게 도움이 되지 않는다고 생각된다면(또는 그런 조직원이 있다면) 회고에 대한 의도와 필요성에 대해서 이해도가 부족한 경우가 많다. 실제로 이런 생각을 하게 되는 사람들이 많지만 겉으로는 표현 안 하는 때가 있다. 그래도 회고에 부정적이거나 적극적으로 하지 않는다면 필요성에 대해서 이야기를 해야 할 것이다.&lt;br /&gt;&amp;nbsp; 그리고 필요성을 알고 있으나 잘못된 회고를 통해서 회고를 하는 것에 대한 부정적인 생각이 생기는 경우라면 이런 내용 자체가 회고를 통해서 함께 논의 되고 Action Plan 으로 도출 되도록 스크럼 마스터가 신경을 써야 한다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; &amp;nbsp;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
        <pubDate>Wed, 11 Dec 2013 01:38:00 +0900</pubDate>
        <link>http://yourdomain.com/2013/12/11/blog-post_2142.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2013/12/11/blog-post_2142.html</guid>
        
        <category>Agile</category>
        
        
      </item>
    
      <item>
        <title>[결국 당신은 이길 것이다] 악마와의 대화를 통한 성공방법</title>
        <description>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-_Eei5qnIGuw/Uqc4Hhcj1bI/AAAAAAAAAHI/PV9spFC56-I/s1600/ugc.jpeg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://3.bp.blogspot.com/-_Eei5qnIGuw/Uqc4Hhcj1bI/AAAAAAAAAHI/PV9spFC56-I/s320/ugc.jpeg&quot; width=&quot;216&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp;&quot;결국 당신은 이길 것이다&quot; 라는 제목에서 보면 일반적인 자기 개발서로 느껴지게 됩니다. 하지만 오래전에 쓰여진 나폴레옹 힐에 작품이면서 특이하게도 악마와의 대화를 사용해서 사람이 성공하고 행복해지는 방법에 대해서 말합니다.&lt;br /&gt;&amp;nbsp; 내용의 주는 악마와의 대화를 통해 악마가 어떻게 인간에게 부정적인 힘을 작용하는지 악마에 입으로 듣게 됩니다. 물론 저는 신을 믿지 않기 때문에 악마라는 존재 또한 믿지 않는 사람입니다. 그렇지만 악마라는 인간에게 부정적인 이미지의 대명사를 통해서 저자가 하고 싶어하는 내용을 전달하였다고 생각합니다.&lt;br /&gt;&amp;nbsp; &amp;nbsp;물론 책에서는 이러한 악마와의 대화 내용이라는 이유와 학교, 종교가 악마에게 이득을 주고 있다는 내용을 이유로 오랜동안 책으로 출판하지 않았다고 합니다. 책 내용으로만 봐서는 아마도 과거 출판했으면 큰 사회적 파장을 만들거나 아니면 조용히 책이 사라지었을 것 같기는 합니다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp; 책에서는 주로 인간이 성공(행복) 하게 되는 경우는 우리가 주로 알고 있는 신의 영역(긍정적인 부분)이 담당하고 그에 반대되는 부분을 악마의 영역입니다. 악마는 인간에게 쉽게 적근해서 인간을 부정적이게 만들어서 실패하게 만든다고 합니다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;교육과 종교가 악마가 인간에게 침투하기 좋은 환경을 만들어 주는 부분에서 예상치 못한 부분이라 조금은 신선했으며, 특히 그 논리가 충분하다고 보이기 까지 했다. &amp;nbsp;어느 정도 악마가 주장하는 부분에 대해서 나도 공감하고 변화해야 한다고 생각했었다. 이런 부분이 오래전부터 그랬다면 앞으로도 그리 쉽게 변하지 않을거라는 생각까지 들었다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;결국 인간은 &quot;두려움&quot; 을 이겨내야 하는데 여기서는 7가지 방법에 대해서 말한다.&lt;br /&gt;&amp;nbsp;또한 명확한 목표와 확실한 계획을 가져야지만 행복의 길로 가게 된다. 방황하는 순간 이미 악마가 내안에 들어와 있을수 있는것 이다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;다른 자기 개발서나 행복해지기 위한 여러가지 인문 책과는 다른점들이 많은 책이다. 인생의 변화가 필요한 사람에게 한번쯤은 읽어 볼 만한 책으로 추천은 하지만 이상하게 나는 이런 스타일에 책을 읽고 나면 조금은 아쉽움이 남는다. 내가 아는 것과 다른 내용은 그리 많지 않다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;그래도 이 책을 읽으면서 최근에 내가 목표하고 실천하는 방법이 나쁘지 않고 이 책과 어느정도 비슷하게 가고 있다는 것이다. 당분간 나에게는 악마가 접근하지 않을 듯 하다.&lt;br /&gt;&lt;br /&gt;</description>
        <pubDate>Wed, 11 Dec 2013 01:07:00 +0900</pubDate>
        <link>http://yourdomain.com/2013/12/11/blog-post_10.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2013/12/11/blog-post_10.html</guid>
        
        <category>book</category>
        
        
      </item>
    
      <item>
        <title>[공부하는 인간] 어떻게 공부해야 하는 것일까?</title>
        <description>&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://2.bp.blogspot.com/-7mkRBffYhAI/UqRDZuzhXnI/AAAAAAAAAG4/mac_CLXhBEU/s1600/study2.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://2.bp.blogspot.com/-7mkRBffYhAI/UqRDZuzhXnI/AAAAAAAAAG4/mac_CLXhBEU/s320/study2.jpg&quot; width=&quot;232&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;한국 처럼 교육열이 높은 나라에서는 항상 공부를 어떻게 하면 잘 할 수 있는 거라는 궁금한 생각이 들었다. 이책은 어떻게 하면 공부를 잘 할 수 있는지 설명하는 책은 아니다.&lt;br /&gt;&amp;nbsp;한국을 비롯한 동서양 그리고 유대인들이 공부하는 방법을 소개하고 그 이유 또한 알려준다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;이 책에 내용을 보면서 한국만 이렇게 교육열이 높은게 아니구라 라는 생각과 함께 동양의 특징적인 공부방식뿐만 아니라 서양 그리고 유대인 특히 앞으로 지향해야 하는 학습 방법까지 알려준다. 그러한 측면에서 보면 공부에 대해서 다시 한번 생각하는 하는 책이다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;EBS 프로는 한번도 보지 않았지만 책을 통해서 한번 다시보기 영상을 봐도 좋겠다는 생각이 들 만큼 괜찮은 책이다. 특히 지금 공부를 하는 학생이거나 또는 학생의 부모나 가르키는 선생님이라면 한번은 읽어봤으면 좋겠다. 내용에 정답이 있다기 보다는 우리가 공부하는 방법에 대해서 여러가지 사회적 역사적 이유를 이해할 수 있기 때문이다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;동,서양이 다른 문화.사회적 차이로 인한 공부 방법에 차이. 그로 인한 부모가 아이들에게 대하는 자세 또한 다르게 된다. 이 부분은 많은 걸 생각하게 하는 부분이었다. 특히 타협하는 동양 , 논쟁하는 서양 이부분에서 앞으로 우리가 좀 더 신경써야 하는 부분이 어느 것인지 알 수 있게 된 것 같다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;나도 학생때를 생각해보면 질문 보다는 지식의 습득이 우선이었다. 잘 이해가 가지 않아도 질문하거나 내 생각과 달라도 다른 논쟁을 만들지 않았다. &quot;공부는 지식을 나누는 것이다&quot; 이부분에서 지식을 나누는 과정에서 많은 지식들을 알게 되고 또한 새로운 지식을 만들수 있는 것이다. 아마 한국 사회가 교육수준에 비해서 창의성이나 새로운 것에 대한 도전에 약한것은 이러한 공부 방법이 원인이 아닐까 싶다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;한국 사회에서도 변화의 목소리가 조금씩은 나오겠지만 이러한 공부 문화는 쉽게 달라 지기는 어려울 것 같기도 하다. 나는 이제 학교에서는 배우지 않지만 계속적으로 배우는 방법을&lt;br /&gt;지식을 나누는 방식으로 해보아야 겠다는 생각을 하게 만든 책이다.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;</description>
        <pubDate>Sun, 08 Dec 2013 19:16:00 +0900</pubDate>
        <link>http://yourdomain.com/2013/12/08/blog-post_8.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2013/12/08/blog-post_8.html</guid>
        
        <category>book</category>
        
        
      </item>
    
      <item>
        <title>[빅데이터 승리의 과학] 빅데이터는 당신이 무엇을 선택할지 알고 있다.</title>
        <description>&lt;br /&gt;&lt;br /&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://4.bp.blogspot.com/-gsAIDtPkFqI/UqPeRGCsBzI/AAAAAAAAAGo/QDgzaEPu15c/s1600/423240_20130502165654_732_0001.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://4.bp.blogspot.com/-gsAIDtPkFqI/UqPeRGCsBzI/AAAAAAAAAGo/QDgzaEPu15c/s320/423240_20130502165654_732_0001.jpg&quot; width=&quot;233&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&amp;nbsp;빅데이터 승리의 과학 이 책은 최근 몇년동안 여러 분야에서 회자되고 있는 빅데이터에 대한 이야기이다. 단순하게 데이터의 중요성뿐만 아니라 오바마에 재선선거때 빅데이터를 어떻게 사용했는지에 대한 구체적인 예를 통해서 독자에게 빅데이터를 어떻게 수집하고 이용해야하는지 이해를 시켜준다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;그 동안 여러분야에서 오랜 경험을 가지고 있는 사람들의 감으로 전략이 선택되어지는 경우가 많았다. 하지만 그 누구도 신이 아니기에 확신하기가 어렵다. 이런 부분에서 선택을 해야하는 결정권자들은 많은 고민을 하게 된다. 이러한 고민에 빅데이트는 객관적 사실 기반으로 결정에 많은 도움을 줄 것이다. 물론 객관적 사실을 주기위해서는 많은 노력과 실천이 필요하다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;이 책에서는 빅데이터에 대한 기초적이고 기본적인 이야기를 하고 있다. 물론 오바마 선거라는 구체적인 예를 들고 있지만 워낙 빅데이터라는 것이 방대한 내용을 가지고 있기 때문에 이 책 한권으로 빅데이터에 대해서 전부를 이해하기를 어려울 것이다. 이 책을 통해서는 빅데이터가 그냥 유행이 아닌 실제로 많은 부분 성공적으로 이루어지고 있고, 우리가 인지 하지 못하는 부분에서도 이미 빅데이터를 통해서 우리 삶에 영향을 주는 부분이 있다는 사실을 인지하는 것이다.&lt;br /&gt;&lt;br /&gt;빅데이터는 다양하고 복잡한 개개인을 분석해서 개인별 타케팅이 가능하다. 이 책에서는 선거에 이용하였고, 기업에서는 개인화 마케팅 또는 기업 전략등에 이용하게 될 것이다. 또한 사회 안정만등 공공 부분에서도 지역별, 세대별, 또는 여러복잡한 분류별로의 최적화 된 공공서비스 제공을 할 수 있게 한다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;이 책 에 많은 사례를 구지 설명하지 않겠다. (궁금하다면 책을 한번 읽어보기를 권한다)&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&amp;nbsp;여기서 가장 중요한것은 마이크로 타기팅의 프로세스이다.&lt;br /&gt;&amp;nbsp;&lt;br /&gt;&amp;nbsp;전략수립 -&amp;gt; 시스템구축 -&amp;gt; 데이터 수집 -&amp;gt; 타킷 설정-&amp;gt; 테스트 -&amp;gt; 반복과 공유&lt;br /&gt;&lt;br /&gt;&amp;nbsp;여기에 해당 프로세스는 어느 하나 문제시 원하는 결과를 얻기가 어렵다. 빅데이터를 정확하게 이해하지 않고 도입할 경우 뒷부분에만 치우치게 되어서 정확한 가설없이 데이터를 판단하게 되어서 객관적이고 정확한 데이터를 얻어 낼수가 없다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;최근에 빅데이터가 다양한 분야에서 활용하고 앞으로도 활용할 예정으로 알고 있다. 하지만 모두가 빅데이터로 성공하지는 않을 것으로 보인다. 전략 수립부터 전략에 맞는 시스템 구축그리고 데이터 수집이 되어야 타킷,테스트,반복과공유가 정확하게 될 것이다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;이 책을 통해서는 빅데이터에대한 기본 지식 뿐 아니라 전체적으로 빅데이터를 어떻게 활용할지에 대한 고민이 시작되었으면 좋겠다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;나는 이미 빅데이터에 대한 다른 도서나 글을 통해서 많은 내용을 알고 있었다. 아마도 이&lt;br /&gt;책은 빅데이터를 잘 모르거나 이제 알게 된 분들에게는 많은 도움이 될것으로 보인다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;또한 마지막 부분에 나오는 빅데이터를 통한 마이크로 타기팅에 관련된 긍정과 부정의 입장에 대한 고찰이다. 긍정적은 부분은 책전체에 설명이되어져 있다. 하지만 부정적인 측면 관련해서 개인 정보의 보호이다. 최근 내가 시작한 프로젝트도 개인 정보 보호와 관련되어져 있기 때문에 이부분에 더 많은 관심이 생기고 있다. 개인 정보를 기반으로 한 마이크로 타키팅과 개인 정보 보호를 어떻게 적절하게 조절 해야하는지는 앞으로 빅데이터를 사용하는 곳에서의 가장 큰 고민이 될 것으로 보인다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;[빅데이터 승리의 과학] 이 책은 우선 내용이 어렵지 않아서 쉽게 읽을수 있을 것이다. 빅데이터에 관심이 있거나 이게 어떤것일까? 라는 궁금함이 있는 사람이라면 추천할 만한 책으로 보입니다. 또한 오바마 선거에 구체적인 사례또한 잘 설명되어져 있습니다.&lt;br /&gt;&amp;nbsp;하지만 좀더 깊은 내용을 원하는 사람이라면 조금 내용이 일반화 된 것으로 보이는 부분도 있습니다.&lt;br /&gt;&amp;nbsp;전반적으로 책 내용은 이해하기 쉽게 잘 쓰어진 책으로 보입니다&lt;br /&gt;</description>
        <pubDate>Sun, 08 Dec 2013 12:13:00 +0900</pubDate>
        <link>http://yourdomain.com/2013/12/08/blog-post.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2013/12/08/blog-post.html</guid>
        
        <category>bigdata</category>
        
        <category>book</category>
        
        
      </item>
    
      <item>
        <title>[Agile] 애자일 소트프웨어 개발 선언</title>
        <description>&lt;div style=&quot;background-color: white; font-family: sans-serif; font-size: 14px; line-height: 21px; margin-bottom: 0.5em; margin-top: 0.4em;&quot;&gt;&lt;br /&gt;&lt;/div&gt;&lt;div style=&quot;background-color: white; font-family: sans-serif; font-size: 14px; line-height: 21px; margin-bottom: 0.5em; margin-top: 0.4em;&quot;&gt;우리는 스스로 행하고 다른 이들도 이를 행할 수 있도록 도움을 줌으로써 소프트웨어 개발의 더 나은 방법을 전파한다. 이러한 작업을 통해 우리는 아래와 같은 가치에 도달하게 되었다.&lt;/div&gt;&lt;ul style=&quot;background-color: white; font-family: sans-serif; font-size: 14px; line-height: 21px; list-style-image: url(data:image/png; margin: 0.3em 0px 0px 1.6em; padding: 0px;&quot;&gt;&lt;li style=&quot;margin-bottom: 0.1em;&quot;&gt;절차와 도구를넘어선&amp;nbsp;&lt;b&gt;개성과 화합&lt;/b&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0.1em;&quot;&gt;종합적인 문서화를 넘어선&amp;nbsp;&lt;b&gt;동작하는 소프트웨어&lt;/b&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0.1em;&quot;&gt;계약과 협상을 넘어선&amp;nbsp;&lt;b&gt;고객과의 협력&lt;/b&gt;&lt;/li&gt;&lt;li style=&quot;margin-bottom: 0.1em;&quot;&gt;계획 준수를 넘어서&amp;nbsp;&lt;b&gt;변화에의 대응&lt;/b&gt;&lt;/li&gt;&lt;/ul&gt;&lt;div style=&quot;background-color: white; font-family: sans-serif; font-size: 14px; line-height: 21px; margin-bottom: 0.5em; margin-top: 0.4em;&quot;&gt;이들의 앞선 가치들을 인정하면서도 뒤에 오는 가치들에 보다 큰 무게를 둔다.&lt;br /&gt;&lt;br /&gt;애자일이 선언하고 있는 가치는 참으로 아름답다고 생각된다.&lt;/div&gt;</description>
        <pubDate>Sat, 21 Sep 2013 20:39:00 +0900</pubDate>
        <link>http://yourdomain.com/2013/09/21/agile.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2013/09/21/agile.html</guid>
        
        <category>Agile</category>
        
        
      </item>
    
      <item>
        <title>[Agile]애자일 마스터 AGILE SAMURAI</title>
        <description>&lt;h2&gt;[Agile]애자일 마스터 AGILE SAMURAI&lt;/h2&gt;&lt;div class=&quot;separator&quot; style=&quot;clear: both; text-align: center;&quot;&gt;&lt;a href=&quot;http://3.bp.blogspot.com/-CpG1Cm7GvsI/Ug97Uk5gX9I/AAAAAAAAAGI/F-lH6udfjDM/s1600/a0079578_4fca02710de81.jpg&quot; imageanchor=&quot;1&quot; style=&quot;margin-left: 1em; margin-right: 1em;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;320&quot; src=&quot;http://3.bp.blogspot.com/-CpG1Cm7GvsI/Ug97Uk5gX9I/AAAAAAAAAGI/F-lH6udfjDM/s320/a0079578_4fca02710de81.jpg&quot; width=&quot;249&quot; /&gt;&lt;/a&gt;&lt;/div&gt;&lt;br /&gt;&lt;br /&gt;&amp;nbsp; 애자일 마스터 책은 애자일을 처음 접하거나 궁금한 분들에게 많은 도움이 될 수 있는 책이 될 거라 생각됩니다. &amp;nbsp;하지만 애자일이 말하는 것들은 특정한 이론이나 방법에 너무 국한 된것이라기 보다는 애자일이 갖고 있는 사상이나 목적에 맞게 해당 애자일 조직이 변화하는것이 중요한 것이라 생각됩니다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp;애자일 마스터라는 책을 읽기 전에 꼭 애자일 선언에 대해서 읽어 보고 생각 보았으면 합니다. &amp;nbsp;애자일에는 여러가지의 방법론들이 있지만 결국 애자일 선언에서 사상을 실현하기 위한 방법론 입니다.&lt;br /&gt;&lt;br /&gt;&amp;nbsp; 아직도 국내에서는(해외에서는 얼마큰 애자일 많이 도입됐는지는 잘 모릅니다.) 애자일이 많이 생소합니다. 또한 알고 있다고 해서 부정적인 생각을 가지고 있는 사람들도 많습니다.&lt;br /&gt;애자일은 개발자를 위한 것이라는 착각을 하는 사람들의 오해 또한 존재 합니다.&lt;br /&gt;이러한 착각과 오해는 결국 애자일의 사상을 이해하고 그 사상에 맞는 방법론을 찾고 실천 해보고 또 다시 고민해보고 고민의 결과를 다시 실천해보고 이러한 방식으로 해당 조직에 맞는 애자일 문화를 만들어야만이 애자일이 성공할 거라 생각이 됩니다&lt;br /&gt;&lt;br /&gt;&amp;nbsp; 애자일 마스터라는 책을 읽는다고 해서 애자일을 다 알수 있는것은 아니지만 그 동안 애자일 방법론에 대한 고민의 결과들이 자세하게 정리되어져 있습니다. 아마도 누구나 고민하던 것들이 많이 녹아 들어가 있어서 애자일을 처음 접하거나 해당 조직을 애자일로 변경 하고 싶은 분들이라면 꼭 한번은 읽어봐야 할 책입니다.&lt;br /&gt;</description>
        <pubDate>Fri, 23 Aug 2013 18:09:00 +0900</pubDate>
        <link>http://yourdomain.com/2013/08/23/agile-agile-samurai.html</link>
        <guid isPermaLink="true">http://yourdomain.com/2013/08/23/agile-agile-samurai.html</guid>
        
        <category>Agile</category>
        
        
      </item>
    
  </channel>
</rss>
